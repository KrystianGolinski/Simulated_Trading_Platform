# Example of .env file for simulated trading platform

# Database Configuration for C++ Engine (Docker environment)
# Used by C++ trading engine when running inside Docker containers
DB_HOST=postgres
DB_PORT=5432
DB_NAME=simulated_trading_platform
DB_USER=your_db_user
DB_PASSWORD=your_secure_password

# Database Configuration for Local Testing (host machine accessing Docker containers)
# Used when running tests from host machine against containerised database
TEST_DB_HOST=localhost
TEST_DB_PORT=5433
TEST_DB_NAME=simulated_trading_platform
TEST_DB_USER=your_db_user
TEST_DB_PASSWORD=your_secure_password

# Full database URL for other services
# Complete PostgreSQL connection string used by Python API and other services
DATABASE_URL=postgresql://your_db_user:your_secure_password@postgres:5432/simulated_trading_platform


# Node.js Environment
# Standard Node.js environment variable (development, production, test)
NODE_ENV=development

# Application Environment
# Custom environment flag used by health endpoints and logging
ENVIRONMENT=development

# Testing Mode Flag
# Boolean flag to enable testing mode in Python API (true/false)
TESTING=false

# Docker Environment Flag
# Used in docker-compose configurations to identify Docker environment
DOCKER_ENV=false


# Frontend Configuration

# React Application API URL
# Base URL for frontend to communicate with backend API
REACT_APP_API_URL=http://localhost:8000


# Development file watching and hot reload settings
# Enable file watching polling for development (useful in Docker environments)
CHOKIDAR_USEPOLLING=true

# Enable webpack polling for file changes
WATCHPACK_POLLING=true

# Enable React Fast Refresh for development
FAST_REFRESH=true


# Node.js memory allocation for build processes
# Increase memory limit for Node.js during build to prevent out-of-memory errors
NODE_OPTIONS="--max-old-space-size=4096"
