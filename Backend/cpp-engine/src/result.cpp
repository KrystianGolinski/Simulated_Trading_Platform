#include <map>

#include "result.h"

// Implementation of errorCodeToString function
std::string errorCodeToString(ErrorCode code) {
    static const std::map<ErrorCode, std::string> error_map = {
        // Database errors
        {ErrorCode::DATABASE_CONNECTION_FAILED, "DATABASE_CONNECTION_FAILED"},
        {ErrorCode::DATABASE_QUERY_FAILED, "DATABASE_QUERY_FAILED"},
        {ErrorCode::DATABASE_TRANSACTION_FAILED, "DATABASE_TRANSACTION_FAILED"},
        {ErrorCode::DATABASE_CONSTRAINT_VIOLATION, "DATABASE_CONSTRAINT_VIOLATION"},
        
        // Validation errors
        {ErrorCode::VALIDATION_INVALID_INPUT, "VALIDATION_INVALID_INPUT"},
        {ErrorCode::VALIDATION_MISSING_REQUIRED_FIELD, "VALIDATION_MISSING_REQUIRED_FIELD"},
        {ErrorCode::VALIDATION_OUT_OF_RANGE, "VALIDATION_OUT_OF_RANGE"},
        {ErrorCode::VALIDATION_INVALID_FORMAT, "VALIDATION_INVALID_FORMAT"},
        
        // Data errors
        {ErrorCode::DATA_SYMBOL_NOT_FOUND, "DATA_SYMBOL_NOT_FOUND"},
        {ErrorCode::DATA_INSUFFICIENT_HISTORY, "DATA_INSUFFICIENT_HISTORY"},
        {ErrorCode::DATA_INVALID_DATE_RANGE, "DATA_INVALID_DATE_RANGE"},
        {ErrorCode::DATA_PARSING_FAILED, "DATA_PARSING_FAILED"},
        
        // Network errors
        {ErrorCode::NETWORK_CONNECTION_TIMEOUT, "NETWORK_CONNECTION_TIMEOUT"},
        {ErrorCode::NETWORK_REQUEST_FAILED, "NETWORK_REQUEST_FAILED"},
        {ErrorCode::NETWORK_AUTHENTICATION_FAILED, "NETWORK_AUTHENTICATION_FAILED"},
        
        // Execution errors
        {ErrorCode::EXECUTION_INSUFFICIENT_FUNDS, "EXECUTION_INSUFFICIENT_FUNDS"},
        {ErrorCode::EXECUTION_INVALID_SIGNAL, "EXECUTION_INVALID_SIGNAL"},
        {ErrorCode::EXECUTION_INVALID_SIGNAL_TYPE, "EXECUTION_INVALID_SIGNAL_TYPE"},
        {ErrorCode::EXECUTION_INVALID_SYMBOL, "EXECUTION_INVALID_SYMBOL"},
        {ErrorCode::EXECUTION_INVALID_PRICE, "EXECUTION_INVALID_PRICE"},
        {ErrorCode::EXECUTION_INVALID_DATE, "EXECUTION_INVALID_DATE"},
        {ErrorCode::EXECUTION_HOLD_SIGNAL, "EXECUTION_HOLD_SIGNAL"},
        {ErrorCode::EXECUTION_NO_POSITION, "EXECUTION_NO_POSITION"},
        {ErrorCode::EXECUTION_ORDER_FAILED, "EXECUTION_ORDER_FAILED"},
        {ErrorCode::EXECUTION_POSITION_LIMIT_EXCEEDED, "EXECUTION_POSITION_LIMIT_EXCEEDED"},
        {ErrorCode::EXECUTION_MARKET_CLOSED, "EXECUTION_MARKET_CLOSED"},
        
        // Technical Analysis errors
        {ErrorCode::TECHNICAL_ANALYSIS_INVALID_PERIOD, "TECHNICAL_ANALYSIS_INVALID_PERIOD"},
        {ErrorCode::TECHNICAL_ANALYSIS_INVALID_PARAMETER, "TECHNICAL_ANALYSIS_INVALID_PARAMETER"},
        {ErrorCode::TECHNICAL_ANALYSIS_INSUFFICIENT_DATA, "TECHNICAL_ANALYSIS_INSUFFICIENT_DATA"},
        
        // Progress reporting errors
        {ErrorCode::PROGRESS_INVALID_SYMBOL, "PROGRESS_INVALID_SYMBOL"},
        {ErrorCode::PROGRESS_INVALID_DATE, "PROGRESS_INVALID_DATE"},
        {ErrorCode::PROGRESS_INVALID_TOTAL_STEPS, "PROGRESS_INVALID_TOTAL_STEPS"},
        {ErrorCode::PROGRESS_INVALID_CURRENT_STEP, "PROGRESS_INVALID_CURRENT_STEP"},
        {ErrorCode::PROGRESS_INVALID_CAPITAL, "PROGRESS_INVALID_CAPITAL"},
        {ErrorCode::PROGRESS_INVALID_VALUE, "PROGRESS_INVALID_VALUE"},
        {ErrorCode::PROGRESS_INVALID_TRADES, "PROGRESS_INVALID_TRADES"},
        {ErrorCode::PROGRESS_INVALID_INTERVAL, "PROGRESS_INVALID_INTERVAL"},
        
        // Trading Engine errors
        {ErrorCode::ENGINE_NO_STRATEGY_CONFIGURED, "ENGINE_NO_STRATEGY_CONFIGURED"},
        {ErrorCode::ENGINE_INVALID_SYMBOL, "ENGINE_INVALID_SYMBOL"},
        {ErrorCode::ENGINE_INVALID_CAPITAL, "ENGINE_INVALID_CAPITAL"},
        {ErrorCode::ENGINE_INVALID_DATE_RANGE, "ENGINE_INVALID_DATE_RANGE"},
        {ErrorCode::ENGINE_NO_DATA_AVAILABLE, "ENGINE_NO_DATA_AVAILABLE"},
        {ErrorCode::ENGINE_SIMULATION_FAILED, "ENGINE_SIMULATION_FAILED"},
        {ErrorCode::ENGINE_BACKTEST_FAILED, "ENGINE_BACKTEST_FAILED"},
        {ErrorCode::ENGINE_MULTI_SYMBOL_FAILED, "ENGINE_MULTI_SYMBOL_FAILED"},
        {ErrorCode::ENGINE_PORTFOLIO_ACCESS_FAILED, "ENGINE_PORTFOLIO_ACCESS_FAILED"},
        {ErrorCode::ENGINE_RESULTS_GENERATION_FAILED, "ENGINE_RESULTS_GENERATION_FAILED"},
        
        // System errors
        {ErrorCode::SYSTEM_MEMORY_ALLOCATION_FAILED, "SYSTEM_MEMORY_ALLOCATION_FAILED"},
        {ErrorCode::SYSTEM_FILE_ACCESS_DENIED, "SYSTEM_FILE_ACCESS_DENIED"},
        {ErrorCode::SYSTEM_CONFIGURATION_ERROR, "SYSTEM_CONFIGURATION_ERROR"},
        {ErrorCode::SYSTEM_UNEXPECTED_ERROR, "SYSTEM_UNEXPECTED_ERROR"},
        
        // Success
        {ErrorCode::SUCCESS, "SUCCESS"}
    };
    
    auto it = error_map.find(code);
    return (it != error_map.end()) ? it->second : "UNKNOWN_ERROR_CODE";
}