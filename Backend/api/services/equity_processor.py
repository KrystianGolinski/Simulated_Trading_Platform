# Equity Processor - Equity Curve Data Processing and Validation Service
# This module provides specialized processing for equity curve data from the Trading Platform API
# 
# Architecture Overview:
# The EquityProcessor implements focused data processing capabilities for equity curve analysis
# and validation. It handles the extraction, processing, and validation of equity curve data
# generated by the C++ trading engine, ensuring data integrity and proper formatting.
#
# Key Responsibilities:
# 1. Equity curve data extraction from C++ engine simulation results
# 2. Comprehensive validation of equity curve structure and content
# 3. Data quality assurance for equity curve points and values
# 4. Format standardization for API response consistency
#
# Data Processing Pipeline:
# 1. Extract equity curve data from simulation results
# 2. Validate data structure and format compliance
# 3. Verify data integrity and value constraints
# 4. Ensure proper date formatting and sequence validation
# 5. Return processed and validated equity curve data
#
# Integration with Trading Platform:
# - Processes equity curve data from C++ engine simulation output
# - Provides data validation for API response consistency
# - Supports equity curve analysis and visualization requirements
# - Ensures data quality for performance calculation services
#
# Validation Framework:
# The processor implements comprehensive validation including:
# - Data type verification for equity curve points
# - Required field validation (date, value)
# - Value constraint validation (non-negative equity values)
# - Date format and structure validation
# - Array structure and integrity validation

import logging
from typing import Dict, Any, List

logger = logging.getLogger(__name__)

class EquityProcessor:
    """
    Specialized service for equity curve data processing and validation.
    
    This class provides focused capabilities for processing equity curve data generated
    by the C++ trading engine. It implements stateless operations for data extraction,
    validation, and quality assurance to ensure consistent and reliable equity curve
    data for the trading platform.
    
    Key Features:
    - Stateless design for high-performance processing
    - Comprehensive data validation and integrity checks
    - Format standardization for API response consistency
    - Detailed error logging for debugging and monitoring
    
    The processor handles equity curve data which represents the portfolio value
    over time during a trading simulation, providing critical data for performance
    analysis and visualization.
    """
    
    def process_equity_curve(self, result_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Extract and process equity curve data from C++ engine simulation results.
        
        This method extracts the equity curve data from the simulation result dictionary
        and returns it in a standardized format. The equity curve represents the portfolio
        value progression over time during the simulation.
        
        Args:
            result_data: Dictionary containing simulation results from C++ engine
            
        Returns:
            List[Dict[str, Any]]: Processed equity curve data, where each point contains:
                - date: Date string for the equity point
                - value: Portfolio value at that date
                
        The method provides safe extraction with fallback to empty list if equity
        curve data is not present in the simulation results.
        """
        return result_data.get("equity_curve", [])
    
    def validate_equity_curve(self, equity_curve: Any) -> bool:
        """
        Comprehensive validation of equity curve data structure and content.
        
        This method performs thorough validation of equity curve data to ensure
        data integrity, proper formatting, and compliance with API requirements.
        It validates both the overall structure and individual data points.
        
        Args:
            equity_curve: Equity curve data to validate (should be list of dictionaries)
            
        Returns:
            bool: True if equity curve data is valid, False otherwise
            
        Validation Criteria:
        - Must be a list structure
        - Each point must be a dictionary
        - Each point must contain required fields: 'date', 'value'
        - Values must be non-negative numbers (int or float)
        - Dates must be string format
        
        The method provides detailed error logging for each validation failure,
        enabling precise debugging and data quality monitoring.
        """
        # Validate top-level structure
        if not isinstance(equity_curve, list):
            logger.error("equity_curve must be a list")
            return False
        
        # Validate each equity curve point
        for i, point in enumerate(equity_curve):
            if not isinstance(point, dict):
                logger.error(f"Equity curve point {i} must be a dictionary")
                return False
            
            # Validate required fields presence
            required_fields = ["date", "value"]
            for field in required_fields:
                if field not in point:
                    logger.error(f"Equity curve point {i} missing required field: {field}")
                    return False
            
            # Validate value field constraints
            value = point.get("value")
            if not isinstance(value, (int, float)) or value < 0:
                logger.error(f"Equity curve point {i} has invalid value: {value}")
                return False
            
            # Validate date field format
            date_str = point.get("date")
            if not isinstance(date_str, str):
                logger.error(f"Equity curve point {i} has invalid date format: {date_str}")
                return False
        
        return True